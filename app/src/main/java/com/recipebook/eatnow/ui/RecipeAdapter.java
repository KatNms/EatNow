package com.recipebook.eatnow.ui;

import android.content.Context;
import android.databinding.DataBindingUtil;
import android.graphics.BitmapFactory;
import android.support.annotation.Nullable;
import android.support.v7.util.DiffUtil;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;

import com.recipebook.eatnow.R;
import com.recipebook.eatnow.databinding.FragmentRecipeListBinding;
import com.recipebook.eatnow.db.Recipe;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

/*
    adapater will determine which fragment to display for each page
 */
public class RecipeAdapter extends RecyclerView.Adapter<RecipeAdapter.RecipeViewHolder>{

    private List<Recipe> rRecipeList;
    private Context context;


    @Nullable
    private final RecipeCallBack rRecipeCallBack;


    public RecipeAdapter(@Nullable RecipeCallBack rRecipeCallBack){
        this.rRecipeCallBack = rRecipeCallBack;
    }

    //function to set recipe lists
    void setRecipeList(final List<Recipe> recipeList){
        if (rRecipeList == null){
            rRecipeList = recipeList;
            notifyItemRangeInserted(0, recipeList.size());
        } else {
            DiffUtil.DiffResult result = DiffUtil.calculateDiff(new DiffUtil.Callback() {
                @Override
                public int getOldListSize() {
                    return rRecipeList.size();
                }

                @Override
                public int getNewListSize() {
                    return recipeList.size();
                }

                @Override
                public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
                    return rRecipeList.get(oldItemPosition).getId() ==
                            recipeList.get(newItemPosition).getId();
                }

                @Override
                public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
                    Recipe oldRecipe = rRecipeList.get(oldItemPosition);
                    Recipe newRecipe = recipeList.get(newItemPosition);
                    return newRecipe.getId() == oldRecipe.getId()
                            && newRecipe.getRecipeTitle() == oldRecipe.getRecipeTitle()
                            && newRecipe.getCategory() == oldRecipe.getCategory()
                            && newRecipe.getServing() == oldRecipe.getServing()
                            && newRecipe.getPrepTime() == oldRecipe.getPrepTime()
                            && newRecipe.getCookingTime() == oldRecipe.getCookingTime()
                            && newRecipe.getIngredients() == oldRecipe.getIngredients()
                            && newRecipe.getInstructions() == oldRecipe.getInstructions()
                            && newRecipe.getImagePath() == oldRecipe.getImagePath();
                }
            });
            rRecipeList = recipeList;
            result.dispatchUpdatesTo(this);
        }
    }

    @Override
    public RecipeViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        //this Binding class is autogenerated after adding binding to xml file.

        FragmentRecipeListBinding binding = DataBindingUtil
             .inflate(LayoutInflater.from(parent.getContext()), R.layout.fragment_recipe_list,
                     parent, false);
        context = parent.getContext();
        binding.setCallback(rRecipeCallBack);
        return new RecipeViewHolder(binding);
    }

    @Override
    public void onBindViewHolder(RecipeViewHolder recipeViewHolder, int i) {
        Recipe current = rRecipeList.get(i);
        String fileName = current.getImagePath();
        try {
            FileInputStream imagePath = context.openFileInput(fileName);
            imagePath.close();
            recipeViewHolder.rBinding.recipeImage.setImageBitmap(BitmapFactory.decodeStream(context
                    .openFileInput(fileName)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NullPointerException e){
            e.printStackTrace();
        }
        recipeViewHolder.rBinding.setRecipe(current);
        recipeViewHolder.rBinding.executePendingBindings();
    }


    @Override
    //returns recipe list size
    public int getItemCount() {
        if (rRecipeList != null){
            return rRecipeList.size();
        } else return 0;
    }


    public class RecipeViewHolder extends RecyclerView.ViewHolder{

      final FragmentRecipeListBinding rBinding;

        public RecipeViewHolder(FragmentRecipeListBinding rBinding) {
            super(rBinding.getRoot());
            this.rBinding = rBinding;
        }
    }


}
